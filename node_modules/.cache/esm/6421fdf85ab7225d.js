let findToken,newToken,setToken,findUserByEmail,newPass,validateFields,jwt;_5ab‍.x([["recover",()=>recover],["changePassword",()=>changePassword]]);_5ab‍.w("../services/Token",[["findToken",["findToken"],function(v){findToken=v}],["newToken",["newToken"],function(v){newToken=v}],["setToken",["setToken"],function(v){setToken=v}]]);_5ab‍.w("../services/User",[["findUserByEmail",["findUserByEmail"],function(v){findUserByEmail=v}],["newPass",["newPass"],function(v){newPass=v}]]);_5ab‍.w("./validateFields",[["default",["validateFields"],function(v){validateFields=v}]]);_5ab‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);




       async function recover(req, res) {
  let { email } = req.body
  let { status, errors } = validateFields({ email })

  //verificando se algum dado foi enviado de maneira incorreta
  if (!status) return res.status(406).json({ status: 406, error: errors })

  try {
    let { status, user } = await findUserByEmail(email)

    if (!status)
      return res
        .status(500)
        .json({ status: 500, error: [{ internalError: 'Erro interno' }] })

    if (user.length === 0) {
      return res
        .status(404)
        .json({ status: 404, error: [{ email: 'E-mail não encontrado' }] })
    } else {
      let { status, expirationToken } = await newToken(email)
      if (!status)
        return res
          .status(500)
          .json({ status: 500, error: [{ internalError: 'Erro interno' }] })

      return res.json({ status: true, expirationToken })
    }
  } catch (error) {
    _5ab‍.g.console.log(error.message)

    return res
      .status(500)
      .json({ status: 500, error: [{ internalError: 'Erro interno' }] })
  }
}

async function validateToken(token, email) {
  try {
    let { status, tokenDB } = await findToken(token)

    if (!status)
      return { status: 500, error: [{ internalError: 'Erro interno' }] }

    if (tokenDB.length === 0)
      return {
        status: 406,
        error: [{ token: 'Token incorreto' }]
      }

    if (tokenDB[0].used === 1)
      return {
        status: 406,
        error: [{ token: 'O token já foi usado' }]
      }

    if (email != tokenDB[0].user_email)
      return {
        status: 406,
        error: [{ email: 'E-mail inválido' }]
      }

    try {
      jwt.verify(tokenDB[0].expirationToken, process.env.SECRET)

      return { status: 200, tokenDB }
    } catch (error) {
      _5ab‍.g.console.log(error.message)
      if (error.message == 'jwt expired')
        return { status: 406, error: [{ token: 'Token expirado' }] }

      _5ab‍.g.console.log(error.message)
      return { status: 500, error: [{ internalError: 'Erro interno' }] }
    }
  } catch (error) {
    _5ab‍.g.console.log(error.message)

    return { status: 500, error: [{ internalError: 'Erro interno' }] }
  }
}

       async function changePassword(req, res) {
  let { token, email, password } = req.body

  let { status, errors } = validateFields({ token, email, password })

  if (!status) return res.status(406).json({ status: 406, error: errors })

  try {
    let { status, user } = await findUserByEmail(email)

    if (!status) {
      return res
        .status(500)
        .json({ status: 500, error: [{ internalError: 'Erro interno' }] })
    } else if (user.length === 0) {
      return res
        .status(406)
        .json({ status: 406, error: [{ email: 'E-mail incorreto' }] })
    } else {
      let { status, error, tokenDB } = await validateToken(token, email)

      if (status != 200) {
        return res.status(status).json({ status, error })
      } else {
        let { status } = await newPass(user[0].id, password)

        if (!status) {
          return res
            .status(500)
            .json({ status: 500, error: [{ internalError: 'Erro interno' }] })
        } else {
          let { status } = await setToken(tokenDB[0].id)

          if (!status)
            return res
              .status(500)
              .json({ status: 500, error: [{ internalError: 'Erro interno' }] })

          return res.json({ status: 200 })
        }
      }
    }
  } catch (error) {
    _5ab‍.g.console.log(error)

    return res
      .status(500)
      .json({ status: 500, error: [{ internalError: 'Erro interno' }] })
  }
}
